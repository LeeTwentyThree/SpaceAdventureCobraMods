using System;
using UnityEngine;

namespace GuidedShotPositionFix;

// THIS CLASS WAS GENERATED BY CHAT GPT

[Serializable]
public class FloatGradient
{
    public FloatGradient()
    {
        
    }
    
    public FloatGradient(FloatKey[] keys)
    {
        this.keys = keys;
    }
    
    [Serializable]
    public struct FloatKey
    {
        [Range(0f, 1f)]
        public float time;   // Time between 0 and 1
        public float value;  // Value at this key

        public FloatKey(float time, float value)
        {
            this.time = Mathf.Clamp01(time);
            this.value = value;
        }
    }

    [SerializeField]
    public FloatKey[] keys =
    [
        new(0f, 0f),
        new(1f, 1f)
    ];

    /// <summary>
    /// Evaluates the float gradient at the given time [0-1].
    /// </summary>
    public float Evaluate(float t)
    {
        if (keys == null || keys.Length == 0)
            return 0f;

        if (keys.Length == 1)
            return keys[0].value;

        // Clamp t to [0,1]
        t = Mathf.Clamp01(t);

        // Ensure keys are sorted by time
        Array.Sort(keys, (a, b) => a.time.CompareTo(b.time));

        // If t is before the first key
        if (t <= keys[0].time)
            return keys[0].value;

        // If t is after the last key
        if (t >= keys[keys.Length - 1].time)
            return keys[keys.Length - 1].value;

        // Find the two keys that t is between
        for (int i = 0; i < keys.Length - 1; i++)
        {
            var keyA = keys[i];
            var keyB = keys[i + 1];

            if (t >= keyA.time && t <= keyB.time)
            {
                // Normalize t between keyA.time and keyB.time
                float range = keyB.time - keyA.time;
                float normalizedT = (t - keyA.time) / range;

                // Linear interpolation between values
                return Mathf.Lerp(keyA.value, keyB.value, normalizedT);
            }
        }

        // Fallback (shouldn't reach here)
        return keys[keys.Length - 1].value;
    }
}